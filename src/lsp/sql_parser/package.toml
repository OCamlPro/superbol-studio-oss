
# name of package
name = "sql_parser"
skeleton = "library"

# version if different from project version
# version = "0.1.0"

# synopsis if different from project synopsis
# synopsis = ...

# description if different from project description
# description = ...

# kind is either "library", "program" or "virtual"
kind = "library"

# authors if different from project authors
# authors = [ "Me <me@metoo.org>" ]

# name of a file to generate with the current version
gen-version = "version.ml"

# supported file generators are "ocamllex", "ocamlyacc" and "menhir" 
# default is [ "ocamllex", "ocamlyacc" ] 
generators = ["ocamllex"]

# menhir options for the package
#Example:
#version = "2.0"
#parser = { modules = ["parser"]; tokens = "Tokens" }
#tokens = { modules = ["tokens"]}
# menhir = ...

# whether all modules should be packed/wrapped (default is true)
# pack-modules = false

# whether the package can be silently skipped if missing deps (default is false)
# optional = true

# module name used to pack modules (if pack-modules is true)
# pack = "Mylib"

# preprocessing options
#  preprocess = "per-module (((action (run ./toto.sh %{input-file})) mod))" 
preprocess = "pps ppx_deriving.show"

# files to skip while updating at package level
skip = ["main.ml", "index.mld"]

# package library dependencies
#   [dependencies]
#   ez_file = ">=0.1 <1.3"
#   base-unix = { libname = "unix", version = ">=base" } 
[dependencies]
sql_ast = "version"
cobol_parser = "version"
cobol_common = "version"
cobol_preproc = "version"
ebcdic_lib = "version"
ez_file = ">=0.3"
# autofonce_lib = { version = ">=0.8", for-test = true }

[dependencies.menhir]
libname = "menhirLib"
version = ">=1.2"

# package tools dependencies
[tools]
ppx_deriving = ">=5.2.1"
menhir = ">=20230415"

# package fields (depends on package skeleton)
#Examples:
#  dune-stanzas = "(preprocess (pps ppx_deriving_encoding))" 
#  dune-libraries = "bigstring" 
#  dune-trailer = "(install (..))" 
#  opam-trailer = "pin-depends: [..]" 
#  no-opam-test = "yes" 
#  no-opam-doc = "yes" 
#  gen-opam = "some" | "all" 
#  dune-stanzas = "(flags (:standard (:include linking.sexp)))" 
#  static-clibs = "unix" 
[fields]
dune-libraries = "str"
dune-trailer = """
(menhir (modules grammar)
        (flags --inspection --cmly --table --strict
               --unused-tokens))

"""
