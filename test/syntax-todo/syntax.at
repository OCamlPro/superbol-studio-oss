
# All these tests are syntaxes that SHOULD be parsable by
# superbol-free


AT_SETUP([MF TYPEDEF])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       PROGRAM-ID      prog.
       WORKING-STORAGE SECTION.
       01  bool-t                  pic x comp-5 typedef.
       01  ws-error                bool-t value 78-false.
       01  ws-show-help            bool-t value 78-true.
       PROCEDURE DIVISION.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf --source-format=xcard prog.cob], [1], [Checking `prog.cob'
prog.cob:5.35-5.41:
   2          PROGRAM-ID      prog.
   3          WORKING-STORAGE SECTION.
   4          01  bool-t                  pic x comp-5 typedef.
   5 >        01  ws-error                bool-t value 78-false.
----                                      ^^^^^^
   6          01  ws-show-help            bool-t value 78-true.
   7          PROCEDURE DIVISION.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP



AT_SETUP([MF CONSTANT])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       PROGRAM-ID      prog.
       WORKING-STORAGE SECTION.
       01  ws-formatted-book-columns
           value "ID NAME AUTHOR PRICE STOCK SOLD" constant.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf --source-format=xcard prog.cob], [1], [Checking `prog.cob'
prog.cob:5.51-5.59:
   2          PROGRAM-ID      prog.
   3          WORKING-STORAGE SECTION.
   4          01  ws-formatted-book-columns
   5 >            value "ID NAME AUTHOR PRICE STOCK SOLD" constant.
----                                                      ^^^^^^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP


AT_SETUP([ASSIGN TO EXTERNAL])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id BookLegacy.
       environment division.
       input-output section.
       file-control.
           select bookfile assign to external bookfile
               file status is ls-file-status
               organization is indexed
               access mode is dynamic
               record key is b-stockno
               alternate record key is b-title with duplicates
               alternate record key is b-author with duplicates
	       .
	       ])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf --source-format=xcard prog.cob], [0], [Checking `prog.cob'
prog.cob:6.37-6.45:
   3          environment division.
   4          input-output section.
   5          file-control.
   6 >            select bookfile assign to external bookfile
----                                        ^^^^^^^^
   7                  file status is ls-file-status
   8                  organization is indexed
>> Warning: Ignored EXTERNAL (implementation pending)

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP

AT_SETUP([MF NO PROGRAM-ID])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       display "Hello, COBOL World!"
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:2.7-2.14:
   1   
   2 >        display "Hello, COBOL World!"
----          ^^^^^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF NO PROGRAM-ID])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       display "Hello, COBOL World!"
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:2.7-2.14:
   1   
   2 >        display "Hello, COBOL World!"
----          ^^^^^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF SHARP in FIELD])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       01  my-bird.
           05  #length.
               10  common-name         name-string.
       procedure division.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.15-5.16:
   2          program-id. toto.
   3          working-storage section.
   4          01  my-bird.
   5 >            05  #length.
----                  ^
   6                  10  common-name         name-string.
   7          procedure division.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP



AT_SETUP([MF SHARP DECLARE IN PROCEDURE])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           declare temp-name as pic X(30) = "European Robin"
           .
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.19-5.28:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            declare temp-name as pic X(30) = "European Robin"
----                      ^^^^^^^^^
   6              .
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP



AT_SETUP([MF FIELD ACCESS])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       01  my-bird.
           05  measurements.
               10  length-field.
                   15  min                     pic 9(3)V9.
       procedure division.
           move 12.0 to my-bird::length-field::min.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:9.33-9.45:
   6                  10  length-field.
   7                      15  min                     pic 9(3)V9.
   8          procedure division.
   9 >            move 12.0 to my-bird::length-field::min.
----                                    ^^^^^^^^^^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF parameterized-section])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           perform parameterized-section(my-value) returning my-return.
       parameterized-section section (value-parameter as binary-long)
                             returning return-parameter as binary-long.
           add 1 to value-parameter giving return-parameter.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.51-5.60:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            perform parameterized-section(my-value) returning my-return.
----                                                      ^^^^^^^^^
   6          parameterized-section section (value-parameter as binary-long)
   7                                returning return-parameter as binary-long.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF parameterized-section with no parameter])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           perform no-parameters returning my-return.
       no-parameters section ()
                     returning return-parameter as binary-long.
           move 5 to return-parameter.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.33-5.42:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            perform no-parameters returning my-return.
----                                    ^^^^^^^^^
   6          no-parameters section ()
   7                        returning return-parameter as binary-long.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF parameterized-section with optional argument])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           perform optional-parameter() returning my-return.
       optional-parameter section (value-parameter as binary-long = 0)
                          returning return-parameter as binary-long.
           add 1 to value-parameter giving return-parameter.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.38-5.39:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            perform optional-parameter() returning my-return.
----                                         ^
   6          optional-parameter section (value-parameter as binary-long = 0)
   7                             returning return-parameter as binary-long.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF parameterized-section with by-value argument])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           perform by-value(my-value-not-modified).
       by-value section (value value-parameter as binary-long).
           add 1 to value-parameter.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.50-5.51:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            perform by-value(my-value-not-modified).
----                                                     ^
   6          by-value section (value value-parameter as binary-long).
   7              add 1 to value-parameter.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF parameterized-section with by-reference argument])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       procedure division.
           perform by-reference(my-reference).
       by-reference section (reference ref-parameter as binary-long).
           add 1 to ref-parameter.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.45-5.46:
   2          program-id. toto.
   3          working-storage section.
   4          procedure division.
   5 >            perform by-reference(my-reference).
----                                                ^
   6          by-reference section (reference ref-parameter as binary-long).
   7              add 1 to ref-parameter.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF LEVEL 78 CONSTANTS])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       78  GRID-SIZE           value 8.
       01  chessboard.
           05  x-positions     occurs GRID-SIZE.
               10  cell    x-cell-name.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:6.38-6.47:
   3          working-storage section.
   4          78  GRID-SIZE           value 8.
   5          01  chessboard.
   6 >            05  x-positions     occurs GRID-SIZE.
----                                         ^^^^^^^^^
   7                  10  cell    x-cell-name.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF VALUES with multiple values])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. toto.
       working-storage section.
       01  letters             pic X occurs 8
                                     values "a", "b", "c", "d",
                                            "e", "f", "g", "h".
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:6.62-6.63:
   3          working-storage section.
   4          01  letters             pic X occurs 8
   5                                        values "a", "b", "c", "d",
   6 >                                             "e", "f", "g", "h".
----                                                                 ^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF COMPUTE with parameterized-section])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. ParameterizedSections.
       procedure division.
           display fibonacci(10)
           goback.
       fibonacci section (n as binary-long) returning result as binary-long.
           if n <= 1
               move n to result
               exit section
           end-if
           compute result = fibonacci(n - 1) + fibonacci(n - 2).
       end program.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:6.25-6.26:
   3          procedure division.
   4              display fibonacci(10)
   5              goback.
   6 >        fibonacci section (n as binary-long) returning result as binary-long.
----                            ^
   7              if n <= 1
   8                  move n to result
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP


AT_SETUP([MF OBJECT ORIENTED EXAMPLE])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
      *
      * Implements a calendar editor column for use in the data grid
      *
      *
       class-id OrderFormsLibrary.CalendarColumn inherits type DataGridViewColumn.

       working-storage section.

       method-id New.
       procedure division.
           invoke super::New(new CalendarCell())
           goback.
       end method.

       method-id get property CellTemplate override.

       procedure division returning return-value as type DataGridViewCell.
           set return-value to super::CellTemplate
           goback.
       end method.

       method-id set property CellTemplate override.

       procedure division using by value the-value as type DataGridViewCell.
           if the-value NOT EQUAL null AND
              NOT the-value::GetType()::IsAssignableFrom(type of CalendarCell)
              raise new InvalidCastException("Must be a CalendarCell")
           end-if

           set super::CellTemplate to the-value
           goback.
       end method.

       end class.

       class-id CalendarCell inherits type DataGridViewTextBoxCell

       working-storage section.

       method-id New.
       local-storage section.
       procedure division.

           invoke super::New()
           set self::Style::Format to "d"
           goback.
       end method.

       method-id InitializeEditingControl public override.
       local-storage section.
       01 ctl type CalendarEditingControl.
       01 dt type DateTime.
       procedure division using by value rowIndex as binary-long, by value initialFormattedValue as object, by value dataGridViewCellStyle as type DataGridViewCellStyle.
           invoke super::InitializeEditingControl(rowIndex, initialFormattedValue, dataGridViewCellStyle)
           set ctl to self::DataGridView::EditingControl as type CalendarEditingControl
           if (self::Value = null)
               set ctl::Value to self::DefaultNewRowValue as type DateTime
           else
               if type DateTime::TryParse(self::Value::ToString(), by reference dt)
                   set ctl::Value to dt
               else
                   set ctl::Value to self::DefaultNewRowValue as type DateTime
               end-if
           end-if
           goback.
       end method.

       method-id get property EditType override.

       procedure division returning return-value as type Type.
           set return-value to type of CalendarEditingControl
           goback.
       end method.

       method-id get property ValueType override.

       procedure division returning return-value as type Type.
           set return-value to type of DateTime
           goback.
       end method.

       method-id get property DefaultNewRowValue override.

       procedure division returning return-value as object.
           set return-value to type DateTime::Now
           goback.
       end method.

       end class.

       class-id CalendarEditingControl inherits type DateTimePicker, implements type IDataGridViewEditingControl.

       working-storage section.
       01 dataGridView type DataGridView.
       01 valueChanged CONDITION-VALUE.
       01 rowIndex binary-long.


       method-id New public.
       local-storage section.
       procedure division.
           set self::Format to type DateTimePickerFormat::Short
           set self::MinDate to new DateTime(1976, 1, 1)
           set self::MaxDate to new DateTime(2099, 12, 31)
           goback.
       end method.

      *> Automatically inserted Methods from System.Windows.Forms.IDataGridViewEditingControl
       method-id ApplyCellStyleToEditingControl.
       procedure division using by value dataGridViewCellStyle as type System.Windows.Forms.DataGridViewCellStyle.
           set self::Font to dataGridViewCellStyle::Font
           set self::CalendarForeColor to dataGridViewCellStyle::ForeColor
           set self::CalendarMonthBackground to dataGridViewCellStyle::BackColor
           goback.
       end method.

       method-id EditingControlWantsInputKey.
       local-storage section.
       procedure division using by value keyData as type System.Windows.Forms.Keys dataGridViewWantsInputKey as condition-value returning return-item as condition-value.
           *> Let the DateTimePicker handle the keys listed.
           evaluate keyData B-AND type System.Windows.Forms.Keys::KeyCode

            when type Keys::Left
            when type Keys::Up
            when type Keys::Down
            when type Keys::Right
            when type Keys::Home
            when type Keys::End
            when type Keys::PageDown
            when type Keys::PageUp
                set return-item to true
            when other
                set return-item to NOT dataGridViewWantsInputKey
           goback.

       end method.

       method-id GetEditingControlFormattedValue.
       procedure division using by value context as type System.Windows.Forms.DataGridViewDataErrorContexts returning return-item as object.
           set return-item to self::EditingControlFormattedValue
           goback.
       end method.

       method-id PrepareEditingControlForEdit.
       procedure division using by value selectAll as condition-value.
           goback.
       end method.

       method-id get property EditingControlDataGridView.
       procedure division returning return-item as type System.Windows.Forms.DataGridView.
           set return-item to dataGridView
           goback.
       end method.

       method-id set property EditingControlDataGridView.
       procedure division using by value #value as type System.Windows.Forms.DataGridView.
           set dataGridView to #value
           goback.
       end method.

       method-id get property EditingControlFormattedValue.
       procedure division returning return-item as object.
           set return-item to self::Value::ToShortDateString()
           goback.
       end method.

       method-id set property EditingControlFormattedValue.
       procedure division using by value #value as object.

           if #value instance of string
               try
                   *> This will throw an exception if the string is
                   *> null, empty, or not in the format of a date.
                   set self::Value to type DateTime::Parse(#value as string)
               catch
                   *> In the case of an exception, just use the
                   *> default value so we're not left with a null
                   *> value.
                   set self::Value to type DateTime::Now
               end-try
           end-if
           goback.
       end method.

       method-id get property EditingControlRowIndex.
       procedure division returning return-item as binary-long.
           set return-item to RowIndex
           goback.
       end method.

       method-id set property EditingControlRowIndex.
       procedure division using by value #value as binary-long.
           set rowIndex to #value
           goback.
       end method.

       method-id get property EditingControlValueChanged.
       procedure division returning return-item as condition-value.
           set return-item to valueChanged
           goback.
       end method.

       method-id set property EditingControlValueChanged.
       procedure division using by value #value as condition-value.
           set #value to valueChanged
           goback.
       end method.

       method-id get property EditingPanelCursor.
       procedure division returning return-item as type System.Windows.Forms.Cursor.
           set return-item to super::Cursor
           goback.
       end method.

       method-id get property RepositionEditingControlOnValueChange.
       procedure division returning return-item as condition-value.
           set return-item to false
           goback.
       end method.
      *> End Methods from System.Windows.Forms.IDataGridViewEditingControl

       method-id OnValueChanged protected override.

       local-storage section.
       procedure division using by value eventArgs as type EventArgs.
           *> Notify the DataGridView that the contents of the cell
           *> have changed.
           set valueChanged to true
           invoke self::EditingControlDataGridView::NotifyCurrentCellDirty(true)
           invoke super::OnValueChanged(eventargs)
           goback.
       end method.

       end class.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:6.16-6.33:
   3         * Implements a calendar editor column for use in the data grid
   4         *
   5         *
   6 >        class-id OrderFormsLibrary.CalendarColumn inherits type DataGridViewColumn.
----                   ^^^^^^^^^^^^^^^^^
   7   
   8          working-storage section.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP



AT_SETUP([MF AND85 DIRECTIVE])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
      $SET ans85
       IDENTIFICATION DIVISION.
       PROGRAM-ID. customer.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:2.6-2.16:
   1   
   2 >       $SET ans85
----         ^^^^^^^^^^
   3          IDENTIFICATION DIVISION.
   4          PROGRAM-ID. customer.
>> Error: Malformed compiler directive

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF LEVEL 78 CONSTANTS])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       IDENTIFICATION DIVISION.
       PROGRAM-ID. customer.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  customer-record.
           03  file-c-order.
             78  no-of-orders              VALUE 10.
               05  file-c-order-entry OCCURS no-of-orders.
                   07  file-ord-no     PIC 9(6).
                   07  file-ord-date   PIC 9(8).
       PROCEDURE DIVISION.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:9.45-9.57:
   6          01  customer-record.
   7              03  file-c-order.
   8                78  no-of-orders              VALUE 10.
   9 >                05  file-c-order-entry OCCURS no-of-orders.
----                                                ^^^^^^^^^^^^
  10                      07  file-ord-no     PIC 9(6).
  11                      07  file-ord-date   PIC 9(8).
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF MISSING POINT BEFORE END PROGRAM])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. GetFlyerLevel.
       procedure division.
           evaluate lnk-award-points
                when < 300
                   move "Bronze" to lnk-award-level
           end-evaluate
       end program.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:8.7-8.10:
   5                   when < 300
   6                      move "Bronze" to lnk-award-level
   7              end-evaluate
   8 >        end program.
----          ^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP




AT_SETUP([MF WHEN COND AND COND])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
       program-id. GetFlyerLevel.
       procedure division.
           evaluate lnk-award-points
                when >= 300 and < 700
                   move "Silver" to lnk-award-level
           end-evaluate.
       end program.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [1], [Checking `prog.cob'
prog.cob:5.28-5.31:
   2          program-id. GetFlyerLevel.
   3          procedure division.
   4              evaluate lnk-award-points
   5 >                 when >= 300 and < 700
----                               ^^^
   6                      move "Silver" to lnk-award-level
   7              end-evaluate.
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP



### ACAS



AT_SETUP([LENGTH])
# promoted on 2024-04-05T13:38
AT_DATA([prog.cob],[
identification division.
program-id.             acas-get-params.
 procedure division.
              MOVE LENGTH(Buffer) TO Buffer-Length
])
AT_CHECK([$SUPERBOL check --recovery=false --free prog.cob], [1], [Checking `prog.cob'
prog.cob:5.19-5.25:
   2   identification division.
   3   program-id.             acas-get-params.
   4    procedure division.
   5 >               MOVE LENGTH(Buffer) TO Buffer-Length
----                      ^^^^^^
>> Error: Invalid syntax

], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP





### MF BankDemo



AT_SETUP([MF ...])
AT_DATA([prog.cob], [
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP





AT_SETUP([MF ...])
AT_DATA([prog.cob], [
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP





AT_SETUP([MF ...])
AT_DATA([prog.cob], [
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP





AT_SETUP([CANCEL ... AS ...])
# Note: this program's semantics makes no sense; it is used to test
# proper parsing of `AS` in object views.
AT_DATA([prog.cob],[
program-id. prog.
procedure division.
    cancel a as universal.
])
AT_CHECK([$SUPERBOL check syntax --recovery=false --std=default prog.cob], [0], [Checking `prog.cob'
])
AT_CLEANUP



AT_SETUP([Check run])
AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 ONE   PIC 9 VALUE 1.
       01 TWO   PIC 9 VALUE 2.
       01 THREE PIC 9 VALUE 3.
       PROCEDURE        DIVISION.
           IF THREE = ONE AND TWO OR THREE
               DISPLAY "OK"
               END-DISPLAY
           END-IF.
           IF 3 = 1 OR 2 AND 3
               DISPLAY "NO"
               END-DISPLAY
           END-IF.
           STOP RUN.
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf --source-format=xcard prog.cob], [0], [Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([ACCEPT AT ... AUTO])
AT_DATA([prog.cob], [
identification division.
program-id.             acas-get-params.
 procedure division.
     accept   menu-reply at 0644 with foreground-color 6 auto.
])

AT_CHECK([$SUPERBOL check --recovery=false --free --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([DISPLAY ... BLINK])
AT_DATA([prog.cob], [
identification division.
program-id.             acas-get-params.
 procedure division.
     display "Waiting < sec " at line ws-lines col 1 blink.
])

AT_CHECK([$SUPERBOL check --recovery=false --free --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([MF Z LITERAL])
AT_DATA([prog.cob], [
       program-id. GetFlyerLevel.
       procedure division.
             MOVE Z'regular mail' TO WS-PRINT-MSG-METHOD.
       end program.
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([ACCEPT FROM COMMAND-LINE])
AT_DATA([prog.cob], [
identification division.
program-id.             acas-get-params.
 procedure division.
     accept   Arg-Vals from command-line.
])

AT_CHECK([$SUPERBOL check --recovery=false --free --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([MF LENGTH in DIVIDE])
AT_DATA([prog.cob], [
       program-id. GetFlyerLevel.
       procedure division.
           DIVIDE LENGTH BANK-SCREEN20-FIELD
             INTO LENGTH OF BANK-SCREEN20-DATA-R
               GIVING WS-SUB1-LIMIT.
       end program.
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP




AT_SETUP([MF ALTERNATE KEY IS])
AT_DATA([prog.cob], [
       program-id. GetFlyerLevel.
       SELECT BNKACC-NDX
                  ASSIGN       TO NDXACC
                  ORGANIZATION IS INDEXED
                  ACCESS MODE  IS SEQUENTIAL
                  RECORD KEY   IS BAC-REC-ACCNO
                  ALTERNATE KEY IS BAC-REC-PID WITH DUPLICATES
                  FILE STATUS  IS WS-BNKACC-NDX-STATUS.
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([MF ENTRY LITERAL USING])
AT_DATA([prog.cob], [
       IDENTIFICATION DIVISION.
       PROGRAM-ID. customer.
       PROCEDURE DIVISION.
       Initialise Section.
       Entry "Initialise" Using Dsc-Control-Block Data-Block.
])

AT_CHECK([$SUPERBOL check --recovery=false --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP



AT_SETUP([RECORDING MODE VARIABLE])
AT_DATA([prog.cob], [
identification division.
program-id.             acas-get-params.
environment division.
input-output            section.
file-control.
     select OPTIONAL ACAS-Params  assign "acas.param"
                                  organisation line sequential.
 data division.
 file section.
 FD  ACAS-Params
     recording mode variable.
 01  ACAS-Params-Record  pic x(80).
])

AT_CHECK([$SUPERBOL check --recovery=false --free --std=mf prog.cob], [0],
[Checking `prog.cob'
])

AT_CLEANUP




AT_SETUP([TRIM TRAILING])

AT_DATA([prog.cob],[
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF FUNCTION LENGTH (FUNCTION TRIM (WS-ARG TRAILING)) <> 4
               DISPLAY "OK"
           END-IF.
])
AT_CHECK([$SUPERBOL check --recovery=false --std=mf --source-format=xcard prog.cob], [0], [Checking `prog.cob'
], [SuperBOL, by OCamlPro. https://get-superbol.com. Affero GPL version.
])
AT_CLEANUP

