# -*- Makefile -*-
STUDIO = superbol_vscode_platform
TARGET_PLATFORMS ?= linux # win32 darwin
TARGET_NAME = superbol-vscode-platform

SRCDIR ?= src
STUDIO_SRCDIR = $(SRCDIR)/vscode/superbol-vscode-platform
GNUCOBOL_SRCDIR = import/gnucobol

CP ?= cp -f # ln -srf

DUNE_BUILD_DIR ?= _build
DUNE_BUILD_ARGS = ${DUNE_CROSS_ARGS}
DUNE_BUILD_SRCDIR =							\
	${DUNE_BUILD_DIR}/default$(strip				\
		$(if $(filter  win32,$(TARGET_PLAT)),.windows)		\
		$(if $(filter darwin,$(TARGET_PLAT)),.osx)		\
							  )/$(SRCDIR)

# TARGET_PLAT is defined in Makefile
TARGET_ARCH ?= x64
TARGET_SPEC = $(TARGET_PLAT)-$(TARGET_ARCH)
TARGET_PROFILE ?= release
TARGET_VSIX = $(TARGET_NAME)-$(VERSION)-$(TARGET_SPEC)-$(TARGET_PROFILE).vsix

DOT_EXE = $(if $(filter win32,$(TARGET_PLAT)),.exe)
SUPERBOL_LSP = superbol-free-$(TARGET_SPEC)$(DOT_EXE)
SUPERBOL_LSPs = $(wildcard superbol-free-*-*)
ifeq ($(TARGET_PLAT)_$(BUILD_STATIC_EXECS),linux_true)
  SUPERBOL_LSP_BUILT = superbol-free
else
  SUPERBOL_LSP_BUILT = ${DUNE_BUILD_SRCDIR}/lsp/superbol-free/main.exe
endif

YARN = npx --yes yarn 

VSCE_ARGS = --yarn -t $(TARGET_SPEC)
VSCE_PACKAGE_ARGS ?= --pre-release
VSCE_PUBLISH_ARGS ?= --pre-release
OVSX_PUBLISH_ARGS ?= --pre-release

# Emacs lsp-mode source directory (https://github.com/emacs-lsp/lsp-mode):
# (could be a submodule)
LSP_MODE_SRCDIR ?= ../lsp-mode

# --- leading rules ---

.PHONY: compile package

all: superbol-lsp-server
compile: superbol-lsp-server build-release
package: vsix-package

superbol-lsp-server $(SUPERBOL_LSP): build vsix-dist-setup
# Only rebuild `package.json` when on Linux
# TODO: maybe just check build platform matches target platform
ifeq ($(TARGET_PLAT),linux)
	$(CP) $(SUPERBOL_LSP_BUILT) $(SUPERBOL_LSP)

  ifeq ($(shell uname),Linux)
  package.json: $(SUPERBOL_LSP_BUILT)
	cp -f package.json package.json.prev
	./$(SUPERBOL_LSP) json vscode --gen package.json
	diff -u package.json.prev package.json && rm -f package.json.prev 
  endif
endif				#linux

.PHONY: build-debug yarn-debug

build-debug:
	${DUNE} build ${DUNE_ARGS} ${DUNE_BUILD_ARGS}	\
	              $(STUDIO_SRCDIR)/$(STUDIO).bc.js
	@mkdir -p _out
	$(CP) ${DUNE_BUILD_DIR}/default/$(STUDIO_SRCDIR)/$(STUDIO).bc.js _out/
	$(MAKE) yarn-debug

# Use 'make build-debug' before to copy the JS file in _out/
yarn-debug: package.json
yarn-debug: _out/superbol-vscode-platform-bundle.js	\
	    _out/superbol-vscode-gdb.js
	$(YARN) esbuild $(filter %.js, $+) \
                --bundle \
                --external:vscode \
                --outdir=_dist \
                --platform=node \
                --target=es6 \
                --sourcemap
# the last command generated _dist/$(STUDIO).bs.js

.PHONY: build-release yarn-release

build-release:
	${DUNE} build ${DUNE_ARGS} ${DUNE_BUILD_ARGS} --profile=release	\
	              $(STUDIO_SRCDIR)/$(STUDIO).bc.js
	@mkdir -p _out
	$(CP) ${DUNE_BUILD_DIR}/default/$(STUDIO_SRCDIR)/$(STUDIO).bc.js _out/
	$(MAKE) yarn-release

# Use 'make build-release' before to copy the JS file in _out/
yarn-release: package.json
yarn-release: _out/superbol-vscode-platform-bundle.js	\
	      _out/superbol-vscode-gdb.js
	$(YARN) esbuild $(filter %.js, $+) \
                --bundle \
                --external:vscode \
                --outdir=_dist \
                --platform=node \
                --target=es6 \
                --minify-whitespace \
                --minify-syntax \
                --sourcemap \
                --sources-content=false

# ---

_out/superbol-vscode-platform-bundle.js:			\
		src/vscode/superbol-vscode-platform/bundle.js
	@mkdir -p $(dir $@);
	cp -f $< $@

_out/superbol-vscode-gdb.js:					\
		src/vscode/superbol-vscode-platform/gdb.js
	@mkdir -p $(dir $@);
	cp -f $< $@

# ---

# packaging

.PHONY: vsix-dist-setup vsix-package vsix-debug vsix-release	\
	all-vsix-release-packages				\
	all-vsix-debug-packages					\
	all-vsix-packages

gnucobol-config: $(GNUCOBOL_SRCDIR)/config
	@mkdir -p $@
	rm -r -f $@/*.*
	find $(GNUCOBOL_SRCDIR)/config -type f					\
		-a -regex '.*.\(conf\|conf-inc\|words\|ttbl\)' -print0 |	\
		xargs -0 cp -f -t $@

vsix-dist-setup:
	@mkdir -p _dist

vsix-package: gnucobol-config
#	needs 'make build-debug' or 'make build-release' before
	rm -f _dist/superbol-free-*-*
	$(CP) $(SUPERBOL_LSP_BUILT) _dist/$(SUPERBOL_LSP)
	$(YARN) vsce package $(VSCE_ARGS) $(VSCE_PACKAGE_ARGS)	\
		--no-git-tag-version				\
		--no-update-package-json			\
		--out $(TARGET_VSIX) $(VERSION)

vsix-release: superbol-lsp-server build-release
	$(MAKE) vsix-package TARGET_PROFILE=release

vsix-debug: superbol-lsp-server build-debug
	$(MAKE) vsix-package TARGET_PROFILE=debug

all-vsix-release-packages: build-release
	for plat in $(TARGET_PLATFORMS); do			\
		$(MAKE) vsix-release TARGET_PLAT=$${plat};	\
	done

all-vsix-debug-packages: build-debug
	for plat in $(TARGET_PLATFORMS); do			\
		$(MAKE) vsix-debug TARGET_PLAT=$${plat};	\
	done

all-vsix-packages: all-vsix-debug-packages all-vsix-release-packages

vsix-clean: clean
	rm -rf _out gnucobol-config _dist *.vsix

# publishing (requires vsce/ovsx login)

.PHONY: ovsx-deploy vsce-deploy deploy-all

vsce-deploy:
	$(YARN) vsce publish $(VSCE_ARGS) $(VSCE_PUBLISH_ARGS)	\
	        --packagePath $(TARGET_VSIX)

ovsx-deploy:
#	Note: should fail in case of duplicate version
	$(YARN) ovsx publish $(VSCE_ARGS) $(OVSX_PUBLISH_ARGS)	\
	        --packagePath $(TARGET_VSIX)

deploy-all: # Make sure to run target `all-vsix-release-packages` beforehand
#	$(MAKE) all-vsix-release-packages;
	for plat in $(TARGET_PLATFORMS); do				\
		$(MAKE) ovsx-deploy vsce-deploy TARGET_PROFILE=release;	\
	done

# vsix-specific cleanup

.PHONY: clean-execs
clean-execs:
	rm -f superbol-free $(SUPERBOL_LSPs)

distclean: clean-execs vsix-clean
clean: clean-execs

.PHONY: node-setup
node-setup:
	$(YARN) install
build-deps: node-setup

# ---

.PHONY: opam-cross

# Generates opam files for cross-compilation.  We don't generate
# specific files for js-only packages.  As a result we also forcibly
# remove a dependency to `superbol-vscode-platform` (which is js-only)
# from the platform-specific version of `superbol-studio-oss`. This is
# ok as those files are only there to grab external dependencies
# before cross-compiling.
opam-cross:
	drom dep --cross osx
	rm -f opam/osx/*-js-*.opam
	rm -f opam/osx/vscode-debug*.opam
	rm -f opam/osx/*-vscode-*.opam
	sed -i '/"superbol-vscode-platform-osx"/ d'	\
		opam/osx/superbol-studio-oss-osx.opam
	drom dep --cross windows
	rm -f opam/windows/*-js-*.opam
	rm -f opam/windows/vscode-debug*.opam
	rm -f opam/windows/*-vscode-*.opam
	sed -i '/"superbol-vscode-platform-windows"/ d'	\
		opam/windows/superbol-studio-oss-windows.opam

# emacs-lsp:
emacs/lsp-superbol-customs.el: $(LSP_MODE_SRCDIR) package.json
	emacs --batch > "$@" \
	      --load "$(LSP_MODE_SRCDIR)/scripts/lsp-generate-settings.el" \
	      --eval "(dolist (l (lsp-generate-settings \"package.json\")) (print l))" \
	  && echo "Generated $@" 1>&2 \
	  || rm -f "$@"

# 8.0.1
# --eval "(princ (lsp-generate-settings \"package.json\" 'lsp-superbol))" \
# --eval '(princ "\n")' \

.PHONY: test-promote
test-promote: test-syntax-promote
	opam exec -- dune runtest --auto-promote

.PHONY: test-syntax
test-syntax: superbol-lsp-server
	\! opam exec -- autofonce 2>/dev/null || opam exec -- autofonce run -t syntax

.PHONY: test-syntax-promote
test-syntax-promote: test-syntax # To avoid promoting past tests
	\! opam exec -- autofonce 2>/dev/null || opam exec -- autofonce promote -t syntax --apply
